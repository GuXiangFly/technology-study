package cn.guxiangfly;import com.alibaba.fastjson.JSON;import org.apache.flink.api.common.eventtime.SerializableTimestampAssigner;import org.apache.flink.api.common.eventtime.WatermarkStrategy;import org.apache.flink.api.common.functions.MapFunction;import org.apache.flink.contrib.streaming.state.EmbeddedRocksDBStateBackend;import org.apache.flink.contrib.streaming.state.RocksDBStateBackend;import org.apache.flink.runtime.state.memory.MemoryStateBackend;import org.apache.flink.streaming.api.CheckpointingMode;import org.apache.flink.streaming.api.datastream.DataStream;import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;import org.apache.flink.streaming.api.windowing.assigners.TumblingEventTimeWindows;import org.apache.flink.streaming.api.windowing.time.Time;import java.time.Duration;import java.util.Objects;/** * @Author guxiang02 * @Date 2021/5/27 **/public class BdJobRealtimeForVisitAggrForBdId {    public static String GROCERY_CRM_BD_TOPIC = "binlog_pb.grocerygrouphead_grocery_crm_bd";    public static String TAIR_KEY = "BdJobRealtimeForVisitAggrForBdId_EventTimeSlot_key";    public static long UPDATE_INTERVAL = 1000L * 60L * 60L;    public static void main(String[] args) throws Exception {        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();        env.getConfig().setLatencyTrackingInterval(30000);        env.setStateBackend( new RocksDBStateBackend("file:///Users/mtdp/dev/softwareworkspace/flinkdevhome/savepointhome/BdJobRealtimeForVisitAggrForBdIdv2"));       // env.setStateBackend(new MemoryStateBackend());        env.setParallelism(1);        /**此处读取 grocery_crm_bd binlog流*/        DataStream<String> groceryCrmBdStream = env.readTextFile("/Users/mtdp/dev/ideaworkspace/mtdp/crm-data/src/main/resources/testdir/bdjob/binlog_pb.grocery_crm_grocery_crm_bd__bd_visit_his");        DataStream<BdVisitHisWideBean> bdVisitHisWideBeanDataStream = groceryCrmBdStream.filter(s -> s!=null && s.trim()!="").map(s -> JSON.parseObject(s, BdVisitHisWideBean.class)).filter(Objects::nonNull);        /**         * 进行bd维度的聚合         */        DataStream<BdVisitHisWideBean> bdVisitHisBeanDataStream = bdVisitHisWideBeanDataStream                .filter(it -> {                    if (it.getBd_id() == null || it.getBd_id() == 0 || it.getCtime() == null) {                        return false;                    } else {                        return true;                    }                })                .assignTimestampsAndWatermarks(WatermarkStrategy.<BdVisitHisWideBean>forBoundedOutOfOrderness(Duration.ofSeconds(10)).withTimestampAssigner(new SerializableTimestampAssigner<BdVisitHisWideBean>() {                    @Override                    public long extractTimestamp(BdVisitHisWideBean bdVisitHisWideBean, long l) {                        return bdVisitHisWideBean.getCtime();                    }                }));        bdVisitHisBeanDataStream.print("bdVisitHisBeanDataStream");        DataStream<BdVisitHisGroupByBdIdBean> bdVisitHisGroupByBdIdBeanDataStreamResult = bdVisitHisBeanDataStream.keyBy(BdVisitHisWideBean::getBd_id).window(TumblingEventTimeWindows.of(Time.days(1), Time.hours(16)))                .trigger(new MessageProcessOnTimeStateTrigger(UPDATE_INTERVAL))                .apply(new BdVisitHisAggrByBdIdWindowFunction());        DataStream<String> resultDataStream = bdVisitHisGroupByBdIdBeanDataStreamResult.map((MapFunction<BdVisitHisGroupByBdIdBean, String>) value -> JSON.toJSONString(value));        resultDataStream.print("resultDataStream");        env.execute();    }}